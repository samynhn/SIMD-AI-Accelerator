#!/bin/bash

# Copyright (c) 2023 ACAL, National Cheng Kung University
# Copyright (c) 2022 Playlab, National Cheng Kung University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -e

cd "$(dirname "$0")"

IMAGE_NAME="aias-cfu-workspace"
CONTAINER_NAME="aias-cfu-workspace"
USERNAME="$(id -un)"

VOLUME_PROJECTS_DIR="${PWD}/projects/"
VOLUME_SSH_DIR="${PWD}/temp/.ssh/"
VOLUME_VSCODESERVER_DIR="${PWD}/temp/.vscode-server/"

usage_message() {
    cat <<EOF

    This script will help you manage the Docker Workspace for CFU Playground.
    You can execute this script with the following options.

    start     : build and enter the workspace
    stop      : stop and exit the workspace
    prune     : remove the docker image
    rebuild   : remove and build a new image to apply new changes

EOF
}

start_environment() {
    if [[ "$(docker images -q ${IMAGE_NAME})" == "" ]]; then
        docker build \
            --build-arg UID="$(id -u)" \
            --build-arg GID="$(id -g)" \
            --build-arg USERNAME="${USERNAME}" \
            --build-arg ARCH="$(uname -m)" \
            -t ${IMAGE_NAME} . ||
            { echo "error due to docker build image" && exit 1; }
    fi

    [[ -d ${VOLUME_SSH_DIR} ]] || mkdir -p "${VOLUME_SSH_DIR}"
    [[ -d ${VOLUME_VSCODESERVER_DIR} ]] || mkdir -p "${VOLUME_VSCODESERVER_DIR}"
    [[ -d ${VOLUME_PROJECTS_DIR} ]] || mkdir -p "${VOLUME_PROJECTS_DIR}"

    if [[ "$(docker ps | grep ${CONTAINER_NAME})" == "" ]]; then
        stop_docker_container
        docker run -d \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo "/${VOLUME_PROJECTS_DIR}" || echo "${VOLUME_PROJECTS_DIR}")":"/home/${USERNAME}/CFU-Playground/proj/" \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo "/${VOLUME_SSH_DIR}" || echo "${VOLUME_SSH_DIR}")":"/home/${USERNAME}/.ssh/" \
            -v "$([[ ${OSTYPE} == "msys" ]] && echo "/${VOLUME_VSCODESERVER_DIR}" || echo "${VOLUME_VSCODESERVER_DIR}")":"/home/${USERNAME}/.vscode-server/" \
            --hostname "$(echo ${CONTAINER_NAME} | tr '[:lower:]' '[:upper:]')" \
            --name ${CONTAINER_NAME} \
            ${IMAGE_NAME} ||
            { echo "error due to docker run image" && exit 1; }
    fi

    case ${OSTYPE} in
    msys)
        winpty docker exec -it ${CONTAINER_NAME} bash
        ;;
    *)
        docker exec -it ${CONTAINER_NAME} bash
        ;;
    esac

    clear
}

stop_docker_container() {
    if [[ "$(docker ps -a | grep ${CONTAINER_NAME})" != "" ]]; then
        docker container rm -f ${CONTAINER_NAME}
    fi
}

remove_docker_image() {
    if [[ "$(docker images -q ${IMAGE_NAME})" != "" ]]; then
        docker rmi ${IMAGE_NAME}
    fi
}

export DOCKER_SCAN_SUGGEST=false

[[ $(
    docker ps >/dev/null 2>&1
    echo $?
) != 0 ]] && echo "error: please install and start Docker Engine first!!!" && exit 1

case $1 in
start)
    start_environment
    ;;
stop)
    stop_docker_container
    ;;
prune)
    stop_docker_container
    remove_docker_image
    ;;
rebuild)
    stop_docker_container
    remove_docker_image
    start_environment
    ;;
*)
    usage_message
    ;;
esac
